from sentence_transformers import util
import torch

def generalized_semantic_search(text, phrase_embeddings, phrases_list, model, top_k=3):
    # Encode the input text using mean pooling
    text_embedding = model.encode(text, convert_to_tensor=True)
    
    # Calculate similarity scores for each phrase embedding
    similarity_scores = torch.Tensor(
        [util.pytorch_cos_sim(text_embedding, phrase_emb).item() for phrase_emb in phrase_embeddings]
    )
    
    # Get indices of the top_k highest similarity scores
    top_indices = torch.topk(similarity_scores, top_k).indices.tolist()
    
    # Get the phrases and scores for the top results
    top_phrases = [(phrases_list[i], similarity_scores[i].item()) for i in top_indices]
    
    return top_phrases if top_phrases else [("No strong match found", 0)]