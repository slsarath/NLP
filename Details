# Example data setup (replace with your actual data)
import pandas as pd

# Example sorted lists of phrases with their scores
sorted_lists = [
    [('phrase A', 0.8), ('phrase B', 0.7), ('phrase C', 0.6)],
    [('phrase D', 0.9), ('phrase E', 0.85), ('phrase F', 0.75)]
]

# Example theme phrases dictionary
theme_phrases = {
    'Theme 1': ['phrase A', 'phrase B'],
    'Theme 2': ['phrase D', 'phrase E'],
    'Theme 3': ['phrase F']
}

# Function to map phrases to themes
def map_phrases_to_themes(sorted_lists, theme_phrases):
    top_theme = []
    second_theme = []
    third_theme = []
    
    for sorted_list in sorted_lists:
        top_mapped = False
        second_mapped = False
        third_mapped = False
        
        for phrase, score in sorted_list:
            if not top_mapped:
                for theme, phrases in theme_phrases.items():
                    if phrase in phrases:
                        top_theme.append(theme)
                        top_mapped = True
                        break
            elif not second_mapped:
                for theme, phrases in theme_phrases.items():
                    if phrase in phrases and theme not in top_theme:
                        second_theme.append(theme)
                        second_mapped = True
                        break
            elif not third_mapped and score >= 0.3:  # Adjust threshold as needed
                for theme, phrases in theme_phrases.items():
                    if phrase in phrases and theme not in (top_theme + second_theme):
                        third_theme.append(theme)
                        third_mapped = True
                        break
            if top_mapped and second_mapped and third_mapped:
                break
            
        # Handle cases where less than 3 themes are mapped
        if len(top_theme) < len(sorted_list):
            top_theme.extend([''] * (len(sorted_list) - len(top_theme)))
        if len(second_theme) < len(sorted_list):
            second_theme.extend([''] * (len(sorted_list) - len(second_theme)))
        if len(third_theme) < len(sorted_list):
            third_theme.extend([''] * (len(sorted_list) - len(third_theme)))
    
    return top_theme, second_theme, third_theme

# Applying the function to example data
top_theme, second_theme, third_theme = map_phrases_to_themes(sorted_lists, theme_phrases)

# Create a DataFrame with the results
df = pd.DataFrame({
    'Sorted List': sorted_lists,
    'Top theme': top_theme,
    'Second theme': second_theme,
    'Third theme': third_theme
})

print(df)