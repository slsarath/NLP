def combine_semantic_phrases(description_results_str, impact_results_str, semantic_phrases):
    import ast

    # Convert string representations to lists of tuples
    description_results = ast.literal_eval(description_results_str)
    impact_results = ast.literal_eval(impact_results_str)

    combined_phrases = []

    # Process description_results
    if description_results:
        for result in description_results[:3]:  # Limit to top three results
            phrase, score = result[0], result[1]
            found = False
            for category, phrases in semantic_phrases.items():
                if phrase in phrases:
                    found = True
                    break
            if not found:
                combined_phrases.append((phrase, score))

    # Process impact_results
    if impact_results:
        for result in impact_results[:3]:  # Limit to top three results
            phrase, score = result[0], result[1]
            found = False
            for category, phrases in semantic_phrases.items():
                if phrase in phrases:
                    found = True
                    break
            if not found:
                combined_phrases.append((phrase, score))

    # Sort combined_phrases by score in descending order
    combined_phrases.sort(key=lambda x: x[1], reverse=True)

    # Return top three unique phrases with their scores
    return combined_phrases[:3]