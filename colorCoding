import pandas as pd
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import win32com.client as win32


def derive_funding_date(date_str):
    """Convert funding date string to a proper date object."""
    try:
        day = int(date_str[:2])
        month = int(date_str[3:5])
        year = int(date_str[6:10])
        return datetime(year, month, day).date()
    except (ValueError, TypeError):
        return None


def filter_data(df, current_date, filter_team):
    """Filter data for the last 12 months and optionally remove blanks in the 'Team/Security' column."""
    df["funding date- Derived"] = df["A"].apply(derive_funding_date)
    last_12_months = current_date - timedelta(days=365)
    df_filtered = df[df["funding date- Derived"] >= last_12_months]
    if filter_team and "Team/Security" in df.columns:
        df_filtered = df_filtered[df_filtered["Team/Security"].notna()]
    return df_filtered


def write_data_to_sheet(sheet, data):
    """Write data from a pandas DataFrame to an Excel sheet."""
    for r_idx, row in enumerate(data.values.tolist(), start=1):
        for c_idx, value in enumerate(row, start=1):
            sheet.Cells(r_idx, c_idx).Value = value


def set_api_label(workbook, label="API Label Applied"):
    """Set an API label for the entire workbook."""
    workbook.CustomDocumentProperties.Add(Name="API Label", LinkToContent=False, Type=4, Value=label)


def create_actual_pivot(output_file, country, exclusion_list, log_text):
    """Create actual pivot tables in the Excel output file."""
    excel = win32.gencache.EnsureDispatch("Excel.Application")
    excel.Visible = False  # Set to True to see the Excel file while processing
    excel.DisplayAlerts = False  # Disable pop-ups

    try:
        # Open the workbook
        workbook = excel.Workbooks.Open(output_file)

        # Access the filtered data sheet
        filtered_sheet = workbook.Sheets[f"{country} Filtered Data"]

        # Add a new sheet for pivot tables
        pivot_sheet = workbook.Sheets.Add()
        pivot_sheet.Name = f"{country} Pivot Tables"

        # Create Pivot Table Cache
        pivot_cache = workbook.PivotCaches().Create(
            SourceType=1,  # xlDatabase
            SourceData=filtered_sheet.UsedRange,
            Version=6,  # Excel 2016+
        )

        # Add Pivot Table for "Deceased"
        if "Deceased" in pd.read_excel(output_file, sheet_name=f"{country} Filtered Data").columns:
            deceased_df = pd.read_excel(output_file, sheet_name=f"{country} Filtered Data")
            if deceased_df["Deceased"].eq("Yes").any():  # Check if "Yes" exists
                deceased_pivot_table = pivot_cache.CreatePivotTable(
                    TableDestination=pivot_sheet.Cells(1, 1),
                    TableName="DeceasedPivot",
                )
                deceased_pivot_table.PivotFields("Team/Security").Orientation = 1  # xlRowField
                deceased_pivot_table.PivotFields("Banker Name").Orientation = 1  # xlRowField
                deceased_pivot_table.PivotFields("Deceased").Orientation = 3  # xlFilterField
                deceased_pivot_table.PivotFields("Deceased").CurrentPage = "Yes"  # Filter value
                deceased_pivot_table.AddDataField(
                    deceased_pivot_table.PivotFields("Deceased"), "Count of Deceased", -4112  # xlCount
                )
            else:
                log_text.insert(tk.END, "No 'Yes' values in the 'Deceased' column. Skipping this pivot.\n")
        else:
            log_text.insert(tk.END, "'Deceased' column not found. Skipping this pivot.\n")

        # Add Pivot Table for "Current Status"
        breach_pivot_table = pivot_cache.CreatePivotTable(
            TableDestination=pivot_sheet.Cells(20, 1),  # Below the first pivot table
            TableName="BreachPivot",
        )
        breach_pivot_table.PivotFields("Team/Security").Orientation = 1  # xlRowField
        breach_pivot_table.PivotFields("Banker Name").Orientation = 1  # xlRowField
        breach_pivot_table.PivotFields("Current Status").Orientation = 3  # xlFilterField
        breach_pivot_table.PivotFields("Current Status").CurrentPage = "Breach"  # Filter value
        breach_pivot_table.AddDataField(
            breach_pivot_table.PivotFields("Current Status"), "Count of Current Status", -4112  # xlCount
        )

        # Save the workbook
        workbook.Save()
        log_text.insert(tk.END, "Pivot tables created successfully.\n")

    except Exception as e:
        log_text.insert(tk.END, f"Error while creating pivot tables: {e}\n")

    finally:
        workbook.Close(SaveChanges=False)
        excel.DisplayAlerts = True  # Re-enable alerts
        excel.Quit()


def process_and_save(input_file, exclusion_file, output_file, country, log_text):
    """Process input data, apply filters, and save the results."""
    excel_data = pd.ExcelFile(input_file)
    df = excel_data.parse(country)
    exclusion_list = pd.read_excel(exclusion_file)
    current_date = datetime.now().date()

    # Filter data
    filter_team = country == "India"
    filtered_df = filter_data(df, current_date, filter_team)

    # Open Excel using win32com
    excel = win32.gencache.EnsureDispatch("Excel.Application")
    excel.Visible = False
    excel.DisplayAlerts = False

    try:
        # Create a new workbook
        workbook = excel.Workbooks.Add()
        
        # Write raw data to a sheet
        raw_sheet = workbook.Sheets.Add()
        raw_sheet.Name = f"{country} Raw Data"
        write_data_to_sheet(raw_sheet, df)

        # Write filtered data to a sheet
        filtered_sheet = workbook.Sheets.Add()
        filtered_sheet.Name = f"{country} Filtered Data"
        write_data_to_sheet(filtered_sheet, filtered_df)

        # Set API label for the workbook
        set_api_label(workbook, label="API Label Applied")
        log_text.insert(tk.END, "API label applied to the workbook.\n")

        # Save the workbook before creating pivot tables
        workbook.SaveAs(output_file)

        # Create pivot tables
        create_actual_pivot(output_file, country, exclusion_list, log_text)

        # Final log message
        log_text.insert(tk.END, "Process completed successfully.\n")

    except Exception as e:
        log_text.insert(tk.END, f"Error: {e}\n")

    finally:
        workbook.Close(SaveChanges=False)
        excel.Quit()


# GUI Application
def create_gui():
    """Create the GUI for the application."""
    root = tk.Tk()
    root.title("Excel Data Filter and Pivot Tool")

    # Input File
    tk.Label(root, text="Input File:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
    input_entry = tk.Entry(root, width=50)
    input_entry.grid(row=0, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: browse_file(input_entry)).grid(row=0, column=2, padx=10, pady=5)

    # Exclusion File
    tk.Label(root, text="Exclusion File:").grid(row=1, column=0, padx=10, pady=5, sticky="e")
    exclusion_entry = tk.Entry(root, width=50)
    exclusion_entry.grid(row=1, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: browse_file(exclusion_entry)).grid(row=1, column=2, padx=10, pady=5)

    # Output File
    tk.Label(root, text="Output File:").grid(row=2, column=0, padx=10, pady=5, sticky="e")
    output_entry = tk.Entry(root, width=50)
    output_entry.grid(row=2, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: browse_output(output_entry)).grid(row=2, column=2, padx=10, pady=5)

    # Country Selection Dropdown
    tk.Label(root, text="Country:").grid(row=3, column=0, padx=10, pady=5, sticky="e")
    country_var = tk.StringVar(root)
    country_var.set("India")  # Default value
    country_dropdown = ttk.Combobox(root, textvariable=country_var, values=["India", "China"], state="readonly")
    country_dropdown.grid(row=3, column=1, padx=10, pady=5)

    # Log Window
    tk.Label(root, text="Logs:").grid(row=4, column=0, padx=10, pady=5, sticky="nw")
    log_text = scrolledtext.ScrolledText(root, width=60, height=15)
    log_text.grid(row=4, column=1, columnspan=2, padx=10, pady=5)

    # Process Button
    tk.Button(
        root, text="Process and Save",
        command=lambda: process_and_save(
            input_entry.get(), exclusion_entry.get(), output_entry.get(), country_var.get(), log_text
        )
    ).grid(row=5, column=1, padx=10, pady=10)

    root.mainloop()


# Utility functions for file dialogs
def browse_file(entry):
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    entry.delete(0, tk.END)
    entry.insert(0, file_path)


def browse_output(entry):
    file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
    entry.delete(0, tk.END)
    entry.insert(0, file_path)


if __name__ == "__main__":
    create_gui()