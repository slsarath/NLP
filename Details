import os
import extract_msg
import pandas as pd
import re

# Define the words/phrases list (both single words and multi-word phrases)
word_list = ["example", "test", "document", "trade union congress", "national party", "yed"]

# Convert the list to include both singular and plural forms (only for single words)
def generate_word_forms(word_list):
    word_forms = set()
    for word in word_list:
        if " " in word:  # Keep phrases as they are
            word_forms.add(word.lower())
        else:
            word_forms.add(rf'\b{word.lower()}\b')  # Use regex word boundary for exact match
            word_forms.add(rf'\b{word.lower()}s\b')  # Handle plural forms with word boundary
    return word_forms

word_forms = generate_word_forms(word_list)

# Function to preprocess text (remove unwanted characters)
def preprocess_text(text):
    # Convert to lowercase
    text = text.lower()
    # Remove special characters, keeping only alphanumeric and spaces
    text = re.sub(r'[^a-zA-Z0-9\s]', ' ', text)
    return text

# Function to search for keywords in Excel content
def search_in_excel(excel_file_path, word_forms):
    try:
        # Load the Excel file
        xls = pd.ExcelFile(excel_file_path)
        found_words = set()

        # Iterate through each sheet in the Excel file
        for sheet_name in xls.sheet_names:
            sheet = pd.read_excel(xls, sheet_name=sheet_name, engine='openpyxl')
            # Convert sheet content to string and preprocess it
            content = sheet.to_string()
            content = preprocess_text(content)

            # Search for words/phrases
            for phrase in word_forms:
                if " " in phrase:
                    if phrase in content:
                        found_words.add(phrase)
                else:
                    if re.search(phrase, content):
                        found_words.add(phrase.strip(r'\b'))

        return list(found_words) if found_words else []
    except Exception as e:
        print(f"Error processing Excel file {excel_file_path}: {e}")
        return []

# Function to read .msg files, check for Excel attachments, and search their content
def search_in_msg_file(file_path, word_forms):
    try:
        msg = extract_msg.Message(file_path)
        found_words = set()

        # Check for attachments
        for attachment in msg.attachments:
            if attachment.longFilename.endswith('.xls') or attachment.longFilename.endswith('.xlsx'):
                # Save the attachment locally
                attachment.save()
                attachment_path = os.path.join(os.getcwd(), attachment.longFilename)

                # Search for keywords in the Excel attachment
                found_words.update(search_in_excel(attachment_path, word_forms))

                # Clean up by removing the saved attachment file
                os.remove(attachment_path)

        return list(found_words) if found_words else []
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return []

# Function to traverse directories and subdirectories and collect data
def traverse_and_search(root_folder, word_forms):
    data = []
    for root, dirs, files in os.walk(root_folder):
        for file in files:
            if file.endswith(".msg"):
                file_path = os.path.join(root, file)
                found_words = search_in_msg_file(file_path, word_forms)
                data.append({"File Name": file, "Search Results": found_words})
    return data

# Path to the root folder containing .msg files
root_folder = '/path/to/your/folder'

# Traverse the folder and check for matching words, storing results in a list
data = traverse_and_search(root_folder, word_forms)

# Convert the list of results into a DataFrame
df = pd.DataFrame(data)

# Display the DataFrame
print(df)