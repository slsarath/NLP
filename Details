Alright — here’s a Python version that will take your Excel file, create all the derived columns we discussed, and save it back so you can make the pivot in Excel.

I’ll assume your file is named risk_data.xlsx and has the columns you listed.

import pandas as pd

# 1. Load the file
df = pd.read_excel("risk_data.xlsx")

# 2. Ensure date columns are parsed properly
date_cols = ["Event Occurrence Date", "Action Due Date", "Action Start Date", "Action Closed Date"]
for col in date_cols:
    df[col] = pd.to_datetime(df[col], errors="coerce")

# 3. Derived Column – Due Month (YYYY-MM)
df["Due Month"] = df["Action Due Date"].dt.to_period("M").astype(str)
df.loc[df["Action Due Date"].isna(), "Due Month"] = ""

# 4. Derived Column – Action Closure Status
def closure_status(row):
    if row["Action Status"] == "Closed":
        if pd.notna(row["Action Due Date"]):
            return "Closed On Time" if pd.notna(row["Action Closed Date"]) and row["Action Closed Date"] <= row["Action Due Date"] else "Closed Late"
        else:
            return "Closed (No Due Date)"
    else:
        return "Open"

df["Action Closure Status"] = df.apply(closure_status, axis=1)

# 5. Derived Column – Fully Remediated
fully_remediated_flags = []
for idx, row in df.iterrows():
    if row["Due Month"] == "":
        fully_remediated_flags.append("")
    else:
        same_risk_month = df[(df["Risk Event ID"] == row["Risk Event ID"]) & (df["Due Month"] == row["Due Month"])]
        total_actions = same_risk_month.shape[0]
        closed_actions = same_risk_month[same_risk_month["Action Status"] == "Closed"].shape[0]
        fully_remediated_flags.append("Yes" if closed_actions == total_actions else "No")

df["Fully Remediated"] = fully_remediated_flags

# 6. Save the processed file
df.to_excel("risk_data_with_derived.xlsx", index=False)

print("Derived columns created and saved to risk_data_with_derived.xlsx")


⸻

What this gives you

After running this, you’ll have three new columns in risk_data_with_derived.xlsx:
	1.	Due Month – YYYY-MM format (blank if no due date)
	2.	Action Closure Status – Closed On Time, Closed Late, Closed (No Due Date), Open
	3.	Fully Remediated – Yes/No per Risk Event per month

⸻

From here, in Excel:
	•	Make a Pivot Table
	•	Use Due Month as row labels
	•	Count distinct Risk Event ID for “Yes” in Fully Remediated vs Total Risks
	•	Add a calculated % column.

⸻

If you want, I can add one more derived column in Python so you can directly pivot “% of risks remediated per month” without creating a calculated field in Excel — it’ll make your reporting plug-and-play.

Do you want me to add that?

Got it — let’s extend the Python so you get direct % remediation per month in the exported file, and then I’ll walk you through exactly how to pivot it in Excel.

⸻

Updated Python

import pandas as pd

# 1. Load the file
df = pd.read_excel("risk_data.xlsx")

# 2. Ensure date columns are parsed properly
date_cols = ["Event Occurrence Date", "Action Due Date", "Action Start Date", "Action Closed Date"]
for col in date_cols:
    df[col] = pd.to_datetime(df[col], errors="coerce")

# 3. Derived Column – Due Month (YYYY-MM)
df["Due Month"] = df["Action Due Date"].dt.to_period("M").astype(str)
df.loc[df["Action Due Date"].isna(), "Due Month"] = ""

# 4. Derived Column – Action Closure Status
def closure_status(row):
    if row["Action Status"] == "Closed":
        if pd.notna(row["Action Due Date"]):
            return "Closed On Time" if pd.notna(row["Action Closed Date"]) and row["Action Closed Date"] <= row["Action Due Date"] else "Closed Late"
        else:
            return "Closed (No Due Date)"
    else:
        return "Open"

df["Action Closure Status"] = df.apply(closure_status, axis=1)

# 5. Fully Remediated – Yes if all actions in same Risk ID & Due Month are Closed
fully_remediated_flags = []
for idx, row in df.iterrows():
    if row["Due Month"] == "":
        fully_remediated_flags.append("")
    else:
        same_risk_month = df[(df["Risk Event ID"] == row["Risk Event ID"]) & (df["Due Month"] == row["Due Month"])]
        total_actions = same_risk_month.shape[0]
        closed_actions = same_risk_month[same_risk_month["Action Status"] == "Closed"].shape[0]
        fully_remediated_flags.append("Yes" if closed_actions == total_actions else "No")

df["Fully Remediated"] = fully_remediated_flags

# 6. % Remediated per Month
# First: unique risk-month combinations
risk_month_status = df[df["Due Month"] != ""].groupby(["Due Month", "Risk Event ID"]).agg(
    all_closed=("Action Status", lambda x: all(status == "Closed" for status in x))
).reset_index()

# Calculate monthly % remediated
monthly_stats = risk_month_status.groupby("Due Month").agg(
    total_risks=("Risk Event ID", "nunique"),
    remediated_risks=("all_closed", lambda x: sum(x))
).reset_index()

monthly_stats["% Remediated"] = (monthly_stats["remediated_risks"] / monthly_stats["total_risks"]) * 100

# Merge back into main file (optional, just for reference)
df = df.merge(monthly_stats[["Due Month", "% Remediated"]], on="Due Month", how="left")

# 7. Save the processed file
df.to_excel("risk_data_with_derived.xlsx", index=False)

print("Derived columns created and saved to risk_data_with_derived.xlsx")


⸻

What You’ll Have Now

New Columns in Excel:
	•	Due Month
	•	Action Closure Status
	•	Fully Remediated
	•	% Remediated (same for all rows of that month — this is a monthly aggregate for quick reporting)

⸻

How to Make MI Pivots in Excel

1. % of Risks Remediated per Month
	•	Insert Pivot Table from the processed file.
	•	Rows → Due Month
	•	Values → % Remediated (Average)
	•	Format as Percentage.

2. Risk Closure Performance
	•	Rows → Due Month
	•	Columns → Action Closure Status
	•	Values → Count of Action ID.
	•	This shows On-Time, Late, Open counts.

3. Risk Volume Trend
	•	Rows → Month from Event Occurrence Date (grouped by Month-Year)
	•	Values → Count of Risk Event ID (distinct if possible).
	•	This gives raised risk volume per month.

4. Fully Remediated Tracking
	•	Rows → Due Month
	•	Columns → Fully Remediated (Yes/No)
	•	Values → Count of Risk Event ID.
	•	Optional: Add calculated field → Yes / (Yes + No) for %.

⸻

If you want this to look impressive for stakeholders, I’d recommend:
	•	Using a Combo Chart in Excel:
	•	Line for % Remediated
	•	Columns for Total Risks raised.
	•	Color-coding On-Time vs Late closures.

⸻

If you want, I can also merge the monthly stats into a clean summary tab in Python, so you can hand over a ready-to-plot table without even touching Pivot logic. That would make the MI look instantly polished.

Do you want me to do that extra summary export?