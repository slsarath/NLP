from sentence_transformers import util

def evaluate_comment(comment, criteria, model):
    if not comment or not criteria:  # Check for None or empty inputs
        return {}
    
    try:
        # Split the comment into sentences
        sentences = comment.split(".")  # Splitting by period; adjust if needed
        evaluation = {}
        
        for criterion, question in criteria.items():
            # Encode the criterion question only once
            criterion_embedding = model.encode(question, convert_to_tensor=True)
            
            max_similarity = 0  # Initialize max similarity
            for sentence in sentences:
                sentence = sentence.strip()  # Clean up whitespace
                if not sentence:  # Skip empty sentences
                    continue
                
                # Encode the sentence
                sentence_embedding = model.encode(sentence, convert_to_tensor=True)
                
                # Compute similarity
                similarity = util.pytorch_cos_sim(sentence_embedding, criterion_embedding).item()
                
                # Update max similarity for this criterion
                if similarity > max_similarity:
                    max_similarity = similarity
            
            evaluation[criterion] = max_similarity  # Store the highest similarity for the criterion
        
        return evaluation
    except Exception as e:
        print(f"Error during evaluation: {e}")
        return {}

# Apply evaluation to each comment
raw_data["evaluation"] = raw_data["Semantic_Cleaned_Comment"].apply(
    lambda x: evaluate_comment(x, criteria, model_mpnet) if x else {}
)