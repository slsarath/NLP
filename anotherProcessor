import pandas as pd
import logging
import os

class AnotherProcessor:
    def __init__(self):
        self.df = None
        self.risk_library_df = None
        self.proc_library_df = None
        self.or_df = None

    def load_data(self, file_path):
        logging.info(f"Loading data from {file_path}")
        try:
            normalized_path = os.path.normpath(file_path)
            self.df = pd.read_excel(normalized_path)
        except Exception as e:
            logging.error(f"Error loading data: {e}")
            raise

    def load_risk_library(self, file_path):
        logging.info(f"Loading risk library data from {file_path}")
        try:
            normalized_path = os.path.normpath(file_path)
            self.risk_library_df = pd.read_excel(normalized_path)
        except Exception as e:
            logging.error(f"Error loading risk library data: {e}")
            raise

    def load_proc_library(self, file_path):
        logging.info(f"Loading PROC library data from {file_path}")
        try:
            normalized_path = os.path.normpath(file_path)
            self.proc_library_df = pd.read_excel(normalized_path)
        except Exception as e:
            logging.error(f"Error loading PROC library data: {e}")
            raise

    def load_or_file(self, file_path):
        logging.info(f"Loading OR data from {file_path}")
        try:
            normalized_path = os.path.normpath(file_path)
            self.or_df = pd.read_excel(normalized_path)
        except Exception as e:
            logging.error(f"Error loading OR data: {e}")
            raise

    def process_data(self, creation_date_from, creation_date_to):
        logging.info("Processing data for Req2")
        try:
            # Filter the data based on creation dates
            self.df = self.df[
                (self.df['Creation Date'] >= creation_date_from) & 
                (self.df['Creation Date'] <= creation_date_to)
            ]

            # Example of merging data with the risk library, proc library, and or files
            self.df = self.df.merge(self.risk_library_df, how='left', left_on='Risk Name', right_on='Risk Aligned to impact')
            self.df = self.df.merge(self.proc_library_df, how='left', left_on='Process Name', right_on='Causal Process')
            self.df = self.df.merge(self.or_df, how='left', left_on='Organization', right_on='Causal Organization')

            # Add more processing steps as needed
        except Exception as e:
            logging.error(f"Error processing data: {e}")
            raise

    def save_output(self, output_path):
        logging.info(f"Saving output to {output_path}")
        try:
            self.df.to_excel(output_path, index=False)
        except Exception as e:
            logging.error(f"Error saving output: {e}")
            raise