import pandas as pd

# Example DataFrame
data = {
    'Text': [
        'This is a test sentence with more than four words for testing human error.',
        'Another example sentence that might result in system error detection.',
        'One more test case for application error in the dataset.'
    ],
    'Top matching semantic phrases': [
        [('human error', 0.95), ('operator error', 0.90), ('verifier error', 0.85)],
        [('system error', 0.92), ('application error', 0.88), ('human error', 0.82)],
        [('application error', 0.94), ('system error', 0.89), ('operator error', 0.81)]
    ]
}
df = pd.DataFrame(data)

# Example theme dictionary
theme_dict = {
    'Colleague Error': ['human error', 'operator error', 'verifier error'],
    'Technical Error': ['system error', 'application error']
}

def map_phrases_to_themes(phrases, theme_dict):
    theme_mapping = []
    for phrase, score in phrases:
        for theme, phrase_list in theme_dict.items():
            if phrase in phrase_list:
                theme_mapping.append((theme, score))
                break
    return theme_mapping

# Apply the mapping function to create new columns
df['Top Matching theme'] = df['Top matching semantic phrases'].apply(lambda x: map_phrases_to_themes(x, theme_dict))
df['Top Matching theme 1'] = df['Top Matching theme'].apply(lambda x: x[0][0] if len(x) > 0 else None)
df['Top Matching theme 2'] = df['Top Matching theme'].apply(lambda x: x[1][0] if len(x) > 1 else None)
df['Top Matching theme 3'] = df['Top Matching theme'].apply(lambda x: x[2][0] if len(x) > 2 else None)

# Drop the intermediate column used for mapping
df.drop(columns=['Top Matching theme'], inplace=True)

print(df)