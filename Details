import random
import hashlib

st.markdown("### üõ°Ô∏è Controls Relevant to Top Incident Themes")

# Create a hash key based on themes list to cache only by unique themes
def get_theme_hash(themes_list):
    return hashlib.md5(",".join(sorted(themes_list)).encode()).hexdigest()

if selected_dept and selected_dept in theme_dict:
    selected_themes = list(theme_dict[selected_dept].keys())
    theme_hash = get_theme_hash(selected_themes)

    if "global_control_mapping" not in st.session_state:
        st.session_state.global_control_mapping = {}

    # If this theme combo hasn't been processed yet, prompt OpenAI
    if theme_hash not in st.session_state.global_control_mapping:
        theme_string = ", ".join(selected_themes)
        control_prompt = (
            f"You are a risk expert. The following are the top incident themes: {theme_string}. "
            f"For each, suggest one relevant control measure, and rewrite it to make it more robust. "
            f"Return the result as a JSON list like:\n"
            "[\n"
            "  {\n"
            "    'incident_theme': 'Data Breach',\n"
            "    'control_description': 'Encrypt data',\n"
            "    'robust_control': 'Implement AES-256 encryption with access logging and real-time anomaly detection.'\n"
            "  }\n"
            "]"
        )

        try:
            response = client.chat.completions.create(
                model=deployment_name,
                messages=[
                    {"role": "system", "content": "You map incident themes to internal controls and improve them."},
                    {"role": "user", "content": control_prompt}
                ],
                temperature=0.4,
                max_tokens=1000
            )

            # Parse and enrich
            ctrl_text = response.choices[0].message.content.strip().replace("```json", "").replace("```", "")
            control_list = json.loads(ctrl_text)

            for ctrl in control_list:
                ctrl['control_id'] = f"CTRL-{random.randint(1000, 9999)}"

            st.session_state.global_control_mapping[theme_hash] = control_list

        except Exception as e:
            st.error(f"Failed to retrieve controls for themes: {e}")

    # Display cached result
    if theme_hash in st.session_state.global_control_mapping:
        control_df = pd.DataFrame(
            st.session_state.global_control_mapping[theme_hash]
        )[['control_id', 'incident_theme', 'control_description', 'robust_control']]

        st.dataframe(control_df, use_container_width=True)