Hereâ€™s how you can adapt the code you provided to search for exact matches and check for different word forms like singular and plural in a text column of a DataFrame:

### Step 1: Prepare Your Data and Word List
```python
import pandas as pd
import re

# Sample DataFrame
data = {'Text': [
    'The government needs to address political views.',
    'There is a strong need for money in politics.',
    'We should consider non-political views in this context.',
    'The governmental policies must focus on the economy.'
]}

df = pd.DataFrame(data)

# List of words and phrases to search for
word_list = ["government", "need for money", "political view", "politics"]
```

### Step 2: Generate Word Forms
This function generates regex patterns for exact matches and plural forms:

```python
def generate_word_forms(word_list):
    word_forms = set()
    for word in word_list:
        if " " in word:  # Handle multi-word phrases
            word_forms.add(rf'\b{word.lower()}\b')
        else:
            word_forms.add(rf'\b{word.lower()}\b')  # Exact match
            word_forms.add(rf'\b{word.lower()}s\b')  # Handle plural form
    return word_forms

word_forms = generate_word_forms(word_list)
```

### Step 3: Preprocess the Text
You may want to preprocess the text to ensure consistency:

```python
def preprocess_text(text):
    # Convert to lowercase
    text = text.lower()
    # Replace non-alphanumeric characters with spaces, keeping word boundaries intact
    text = re.sub(r'[^a-zA-Z0-9\s]', ' ', text)
    return text
```

### Step 4: Search for Matches
This function will search for the generated word forms in the text:

```python
def find_matches(text, word_forms):
    matches = set()
    preprocessed_text = preprocess_text(text)
    for phrase in word_forms:
        if re.search(phrase, preprocessed_text):
            matches.add(re.sub(r'\\b', '', phrase))  # Remove the word boundary markers for output
    return list(matches)

# Apply the function to the DataFrame
df['Matches'] = df['Text'].apply(lambda x: find_matches(x, word_forms))

# Display the DataFrame with matches
print(df[['Text', 'Matches']])
```

### Step 5: View the Results
This code will add a `Matches` column to your DataFrame that lists all matching words and phrases, including plural forms.

### Sample Output
After applying the above code, the output might look like this:

```plaintext
                                             Text                          Matches
0  The government needs to