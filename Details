import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans

# Sample DataFrame with refund narratives
# df = pd.DataFrame({'refunds_narrative': [...]})

# Step 1: Filter out any None or empty entries in 'refunds_narrative'
df = df[df['refunds_narrative'].notnull()]  # Remove None entries
df['refunds_narrative'] = df['refunds_narrative'].astype(str)
df = df[df['refunds_narrative'].str.strip() != '']  # Remove empty strings

# Step 2: Vectorize the text data using TF-IDF
try:
    vectorizer = TfidfVectorizer(stop_words='english', max_features=1000)  # Adjust max_features as needed
    X = vectorizer.fit_transform(df['refunds_narrative'])
    
    # Check if X has any None or empty values
    if X is None or X.shape[0] == 0:
        print("Error: Vectorized data 'X' is empty or None.")
    else:
        print("Vectorization successful, proceeding with clustering.")
except Exception as e:
    print("Error during vectorization:", e)

# Step 3: Apply KMeans clustering if X is valid
if X is not None and X.shape[0] > 0:
    try:
        num_clusters = 5  # Adjust the number of clusters based on your data
        kmeans = KMeans(n_clusters=num_clusters, random_state=42)
        df['cluster'] = kmeans.fit_predict(X)
        df['cluster'] = df['cluster'].apply(lambda x: f'Cluster {x + 1}')
    except Exception as e:
        print("Error during clustering:", e)

# Display clustered data if successful
print(df[['refunds_narrative', 'cluster']])