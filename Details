import os
import extract_msg
import pandas as pd
import re
from io import BytesIO

# Define the words/phrases list (both single words and multi-word phrases)
word_list = ["example", "test", "document", "trade union congress", "national party", "yed"]

# Convert the list to include both singular and plural forms (only for single words)
def generate_word_forms(word_list):
    word_forms = set()
    for word in word_list:
        if " " in word:  # Keep phrases as they are
            word_forms.add(word.lower())
        else:
            word_forms.add(rf'\b{word.lower()}\b')  # Use regex word boundary for exact match
            word_forms.add(rf'\b{word.lower()}s\b')  # Handle plural forms with word boundary
    return word_forms

word_forms = generate_word_forms(word_list)

# Function to preprocess text (remove unwanted characters)
def preprocess_text(text):
    # Convert to lowercase
    text = text.lower()
    # Remove special characters, keeping only alphanumeric and spaces
    text = re.sub(r'[^a-zA-Z0-9\s]', ' ', text)
    return text

# Function to search for keywords in Excel content
def search_in_excel(file_content, word_forms):
    try:
        found_words = set()

        # Read the Excel file directly from memory
        xls = pd.ExcelFile(BytesIO(file_content), engine='openpyxl')

        for sheet_name in xls.sheet_names:
            sheet = pd.read_excel(xls, sheet_name=sheet_name)
            content = sheet.to_string()
            content = preprocess_text(content)

            for phrase in word_forms:
                if " " in phrase:
                    if phrase in content:
                        found_words.add(phrase)
                else:
                    if re.search(phrase, content):
                        found_words.add(phrase.strip(r'\b'))

        return list(found_words) if found_words else []
    except Exception as e:
        print(f"Error processing Excel content: {e}")
        return []

# Function to read .msg files, check for Excel attachments, and search their content
def search_in_msg_file(file_path, word_forms):
    try:
        msg = extract_msg.Message(file_path)
        msg_found_words = set()
        attachment_results = []

        # Preprocess and search in the email body
        if msg.body:
            message = preprocess_text(msg.body)
            for phrase in word_forms:
                if " " in phrase:
                    if phrase in message:
                        msg_found_words.add(phrase)
                else:
                    if re.search(phrase, message):
                        msg_found_words.add(phrase.strip(r'\b'))

        # Check for attachments
        for attachment in msg.attachments:
            if attachment.longFilename.endswith('.xls') or attachment.longFilename.endswith('.xlsx'):
                # Read the attachment content directly from memory
                file_content = attachment.data  # Get the binary content of the attachment
                excel_found_words = search_in_excel(file_content, word_forms)
                attachment_results.append({
                    "Attachment Name": attachment.longFilename,
                    "Excel Found Words": excel_found_words
                })

        return list(msg_found_words), attachment_results
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return [], []

# Function to traverse directories and subdirectories and collect data
def traverse_and_search(root_folder, word_forms):
    data = []
    for root, dirs, files in os.walk(root_folder):
        for file in files:
            if file.endswith(".msg"):
                file_path = os.path.join(root, file)
                msg_found_words, attachment_results = search_in_msg_file(file_path, word_forms)
                
                # Prepare the data to append to the DataFrame
                if attachment_results:
                    for attachment in attachment_results:
                        data.append({
                            "File Name": file,
                            "Found Words in MSG": msg_found_words,
                            "Attachment Name": attachment["Attachment Name"],
                            "Found Words in Excel": attachment["Excel Found Words"]
                        })
                else:
                    data.append({
                        "File Name": file,
                        "Found Words in MSG": msg_found_words,
                        "Attachment Name": None,
                        "Found Words in Excel": None
                    })
    return data

# Path to the root folder containing .msg files
root_folder = '/path/to/your/folder'

# Traverse the folder and check for matching words, storing results in a list
data = traverse_and_search(root_folder, word_forms)

# Convert the list of results into a DataFrame
df = pd.DataFrame(data)

# Display the DataFrame
print(df)

# Optionally, save the DataFrame to a CSV file
df.to_csv("search_results.csv", index=False)