import re
import pandas as pd
from dateutil import parser

# Sample DataFrame with extracted narrative values
data = {'Narrative Extracted': [
    '2022, 03/11/2022, 11/11/2022, 06/02/2024'
]}

df = pd.DataFrame(data)

# Function to convert month/year or quarter/year to standard format YYYYQn
def process_narrative(text):
    quarter_years = []

    # Pattern for DD/MM/YYYY dates
    date_pattern = r'\b\d{2}/\d{2}/\d{4}\b'
    # Pattern for "Q" references like "Q3" or "Q3 2023"
    quarter_pattern = r'(Q[1-4])\s?(\d{4})?'
    # Pattern for year only like "2023"
    year_pattern = r'\b\d{4}\b'

    # Find all DD/MM/YYYY dates
    dates = re.findall(date_pattern, text)
    month_dates = []
    
    for date_str in dates:
        try:
            # Parse DD/MM/YYYY date format
            date_obj = parser.parse(date_str, dayfirst=True)
            quarter = (date_obj.month - 1) // 3 + 1  # Determine the quarter
            month_dates.append((date_obj, f"{date_obj.year}Q{quarter}"))
        except Exception as e:
            print(f"Error parsing date: {e}")
            continue

    # Find all quarter-based references
    quarters = re.findall(quarter_pattern, text)
    for q, year in quarters:
        if not year:
            year = "2023"  # Default to current year if year is missing
        quarter_years.append(f"{year}{q}")

    # Find all standalone year references
    years = re.findall(year_pattern, text)
    for year in years:
        # Assume Q4 for standalone years
        quarter_years.append(f"{year}Q4")

    # Sort quarter references and keep only the latest one based on the latest date
    if month_dates:
        # Sort based on the actual date objects to get the latest
        latest_month = max(month_dates, key=lambda x: x[0])[1]
        return latest_month
    
    if quarter_years:
        latest_quarter = max(quarter_years)
        return latest_quarter
    
    return "No Date/Quarter Found"

# Apply the function to the DataFrame
df['Latest Quarter Reference'] = df['Narrative Extracted'].apply(process_narrative)

# Output the DataFrame to check the results
print(df)