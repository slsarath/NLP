Explanation of Changes

	1.	Skip Condition: Checks if the text includes “see issue description” or “refer to issue description” (case insensitive). If so, the function returns an empty list [].
	2.	Exact Match Condition: Iterates through phrases_list and looks for any exact phrase match within the text. If a match is found, it returns that phrase with a similarity score of 1.0 (indicating a perfect match) without further processing.
	3.	Regular Semantic Matching: If no exact match is found, the function proceeds with the standard semantic similarity scoring using the top_k matches based on contextual relevance.

import pandas as pd

# Sample data
data = {
    'OriginalColumn': [
        'CTRL-0062-Income selection',
        'CTRL-0062-Income selection, CTRL-0064-Income deduction',
        'CTRL-0075-Salary adjustments'
    ]
}

# Create DataFrame
df = pd.DataFrame(data)

# Define function to extract control IDs and names
def extract_controls(text):
    controls = text.split(', ')
    control_ids = []
    control_names = []
    for control in controls:
        # Split on the first hyphen only
        id_part, name_part = control.split('-', 2)[0] + '-' + control.split('-', 2)[1], control.split('-', 2)[2]
        control_ids.append(id_part)
        control_names.append(name_part)
    return ', '.join(control_ids), ', '.join(control_names)

# Apply function and create new columns
df[['Column1', 'Column2']] = df['OriginalColumn'].apply(lambda x: pd.Series(extract_controls(x)))

# Display the result
print(df[['Column1', 'Column2']])