Here are a set of well-framed SQL and Python interview questions along with answers, tailored for candidates with 4+ years of experience. The focus is more on SQL, including scenario-based questions:

â¸»

ðŸ”· SQL Questions with Answers

1. How would you find the second highest salary from a table named Employees?
Answer:

SELECT MAX(salary) 
FROM Employees 
WHERE salary < (SELECT MAX(salary) FROM Employees);


â¸»

2. Scenario: You are working on a reporting dashboard. Users are complaining that duplicate entries are being displayed. How would you identify and remove duplicates from a table called Transactions?
Answer:

-- Identify duplicates
SELECT transaction_id, COUNT(*) 
FROM Transactions 
GROUP BY transaction_id 
HAVING COUNT(*) > 1;

-- Remove duplicates (keeping the latest)
WITH RankedCTE AS (
  SELECT *, 
         ROW_NUMBER() OVER (PARTITION BY transaction_id ORDER BY created_date DESC) AS rn
  FROM Transactions
)
DELETE FROM RankedCTE WHERE rn > 1;


â¸»

3. Whatâ€™s the difference between WHERE and HAVING clause?
Answer:
	â€¢	WHERE is used to filter rows before grouping.
	â€¢	HAVING is used to filter groups after aggregation.

â¸»

4. How can you optimize a slow-running SQL query?
Answer:
	â€¢	Use proper indexes
	â€¢	Avoid SELECT *
	â€¢	Use EXISTS instead of IN where applicable
	â€¢	Avoid unnecessary joins
	â€¢	Review execution plan

â¸»

5. Scenario: A table Orders has millions of records. You want to fetch only the top 5 most sold products. How would you do it?
Answer:

SELECT product_id, COUNT(*) AS total_sales 
FROM Orders 
GROUP BY product_id 
ORDER BY total_sales DESC 
LIMIT 5;


â¸»

6. Explain the concept of window functions with an example.
Answer:
Window functions perform calculations across a set of table rows related to the current row. Example:

SELECT employee_id, salary,
       RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS dept_rank
FROM Employees;


â¸»

7. How would you perform a full outer join in databases that donâ€™t support it?
Answer:
Use UNION of LEFT JOIN and RIGHT JOIN:

SELECT * FROM A LEFT JOIN B ON A.id = B.id
UNION
SELECT * FROM A RIGHT JOIN B ON A.id = B.id;


â¸»

8. Write a query to find departments where the average salary is greater than 60,000.
Answer:

SELECT department_id, AVG(salary) as avg_salary
FROM Employees
GROUP BY department_id
HAVING AVG(salary) > 60000;


â¸»

9. How would you update records in one table based on values from another table?
Answer:

UPDATE A
SET A.column1 = B.column2
FROM A
JOIN B ON A.id = B.id;


â¸»

10. Scenario: You need to detect gaps in a sequence of invoice numbers (1,2,3,5,6). How would you do it?
Answer:

SELECT a.invoice + 1 AS missing_invoice
FROM invoices a
LEFT JOIN invoices b ON a.invoice + 1 = b.invoice
WHERE b.invoice IS NULL;


â¸»

ðŸ”¶ Python Questions with Answers

1. What are list comprehensions? Provide an example.
Answer:
List comprehensions provide a concise way to create lists.
Example:

squares = [x*x for x in range(10)]


â¸»

2. Scenario: You have a list of dictionaries containing employee details. How will you filter employees with salary > 50000?
Answer:

filtered = [emp for emp in employees if emp['salary'] > 50000]


â¸»

3. Whatâ€™s the difference between deepcopy() and copy() in Python?
Answer:
	â€¢	copy() creates a shallow copy (changes in nested objects affect the copy).
	â€¢	deepcopy() creates a deep copy (completely independent clone).

â¸»

4. How do you handle missing values in a DataFrame?
Answer:
Using pandas:

df.fillna(value)      # Fill missing values  
df.dropna()           # Drop rows with missing values  


â¸»

5. Scenario: You need to merge two datasets but only keep matching records. What do you use?
Answer:
Use pd.merge(df1, df2, on='id', how='inner')

â¸»

Would you like me to format this into a downloadable document or generate more questions for a specific topic?