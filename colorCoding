import pandas as pd
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows


# Function to derive funding date
def derive_funding_date(date_str):
    try:
        day = int(date_str[:2])  # First 2 characters (day)
        month = int(date_str[3:5])  # Characters 4 and 5 (month)
        year = int(date_str[6:10])  # Characters 7 to 10 (year)
        return datetime(year, month, day).date()
    except (ValueError, TypeError):
        return None


# Function to filter and process data
def filter_data(sheet_name, df, current_date, filter_team):
    # Create a new column "funding date- Derived"
    df['funding date- Derived'] = df['A'].apply(derive_funding_date)

    # Filter rows for the last 12 months from todayâ€™s date
    last_12_months = current_date - timedelta(days=365)
    df_filtered = df[df['funding date- Derived'] >= last_12_months]

    # If filtering on Team column is required
    if filter_team and 'Team' in df.columns:
        df_filtered = df_filtered[df_filtered['Team'].notna()]

    return df_filtered


# Function to generate pivot tables for a dataset
def create_pivots(sheet_name, df, exclusion_list):
    pivots = []

    # Deceased Pivot
    deceased_df = df[df['Deceased'] == "Yes"]
    pivots.append(("Deceased", deceased_df.pivot_table(index=["Team", "Banker"], values="Deceased", aggfunc="count")))

    # AUM < 10,000 Pivot
    aum_df = df[df['AUM'] < 10000]
    pivots.append(("AUM < 10,000", aum_df.pivot_table(index=["Team", "Banker"], values="AUM", aggfunc="count")))

    # Historic Bankers Pivot
    df['Is_Excluded'] = df.apply(
        lambda x: (x['Banker'], x['Team']) in zip(exclusion_list['Banker Name'], exclusion_list['Team']), axis=1
    )
    excluded_df = df[df['Is_Excluded']]
    pivots.append(("Historic Bankers", excluded_df.pivot_table(index=["Team", "Banker"], values="Is_Excluded", aggfunc="count")))

    # Breaches Pivot
    breaches_df = df[df['Current Status'] == "Breach"]
    pivots.append(("Breaches", breaches_df.pivot_table(index=["Team", "Banker"], values="Current Status", aggfunc="count")))

    return pivots


# Main processing function
def process_and_save(input_file, exclusion_file, output_file, log_text):
    try:
        log_text.insert(tk.END, "Processing started...\n")

        # Load input and exclusion files
        excel_data = pd.ExcelFile(input_file)
        exclusion_list = pd.read_excel(exclusion_file)
        log_text.insert(tk.END, "Files loaded successfully.\n")

        # Initialize workbook
        wb = Workbook()
        current_date = datetime.now().date()

        # Step 1: Add original raw data
        combined_raw_data = pd.concat([excel_data.parse("India"), excel_data.parse("China")], ignore_index=True)
        ws_raw = wb.create_sheet(title="Original Raw Data")
        for r_idx, row in enumerate(dataframe_to_rows(combined_raw_data, index=False, header=True), start=1):
            for c_idx, value in enumerate(row, start=1):
                ws_raw.cell(row=r_idx, column=c_idx, value=value)

        # Step 2: Filter India and China data
        for sheet_name, filter_team in [("India", True), ("China", False)]:
            df = excel_data.parse(sheet_name)
            filtered_df = filter_data(sheet_name, df, current_date, filter_team)

            # Add filtered data to a new sheet
            ws_filtered = wb.create_sheet(title=f"{sheet_name} Filtered Data")
            for r_idx, row in enumerate(dataframe_to_rows(filtered_df, index=False, header=True), start=1):
                for c_idx, value in enumerate(row, start=1):
                    ws_filtered.cell(row=r_idx, column=c_idx, value=value)

            # Step 3: Generate Pivot Tables
            pivots = create_pivots(sheet_name, filtered_df, exclusion_list)

            # Add all pivot tables to a single sheet
            ws_pivot = wb.create_sheet(title=f"{sheet_name} Pivot Tables")
            start_row = 1
            for title, pivot_table in pivots:
                # Add pivot table title
                ws_pivot.cell(row=start_row, column=1, value=title)

                # Write pivot table data
                for r_idx, row in enumerate(dataframe_to_rows(pivot_table, index=True, header=True), start=start_row + 1):
                    for c_idx, value in enumerate(row, start=1):
                        ws_pivot.cell(row=r_idx, column=c_idx, value=value)

                start_row += len(pivot_table) + 4  # Leave some space before the next pivot table

        # Save the final workbook
        wb.save(output_file)
        log_text.insert(tk.END, f"Processing completed. Output saved to {output_file}\n")
    except Exception as e:
        log_text.insert(tk.END, f"Error: {e}\n")
        messagebox.showerror("Error", str(e))


# GUI Application
def create_gui():
    root = tk.Tk()
    root.title("Excel Data Filter and Pivot Tool")

    # Input File
    tk.Label(root, text="Input File:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
    input_entry = tk.Entry(root, width=50)
    input_entry.grid(row=0, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: browse_file(input_entry)).grid(row=0, column=2, padx=10, pady=5)

    # Exclusion File
    tk.Label(root, text="Exclusion File:").grid(row=1, column=0, padx=10, pady=5, sticky="e")
    exclusion_entry = tk.Entry(root, width=50)
    exclusion_entry.grid(row=1, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: browse_file(exclusion_entry)).grid(row=1, column=2, padx=10, pady=5)

    # Output File
    tk.Label(root, text="Output File:").grid(row=2, column=0, padx=10, pady=5, sticky="e")
    output_entry = tk.Entry(root, width=50)
    output_entry.grid(row=2, column=1, padx=10, pady=5)
    tk.Button(root, text="Browse", command=lambda: browse_output(output_entry)).grid(row=2, column=2, padx=10, pady=5)

    # Log Window
    tk.Label(root, text="Logs:").grid(row=3, column=0, padx=10, pady=5, sticky="nw")
    log_text = scrolledtext.ScrolledText(root, width=60, height=15)
    log_text.grid(row=3, column=1, columnspan=2, padx=10, pady=5)

    # Process Button
    tk.Button(
        root, text="Process and Save",
        command=lambda: process_and_save(input_entry.get(), exclusion_entry.get(), output_entry.get(), log_text)
    ).grid(row=4, column=1, padx=10, pady=10)

    root.mainloop()


# Utility functions for file dialogs
def browse_file(entry):
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx")])
    entry.delete(0, tk.END)
    entry.insert(0, file_path)


def browse_output(entry):
    file_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
    entry.delete(0, tk.END)
    entry.insert(0, file_path)


if __name__ == "__main__":
    create_gui()